  version: "3.8"
  services:
    frontend:
      build: frontend
      ports:
        - 8501:8501
      depends_on:
        - backend
      volumes:
        - ./frontend:/app
      restart: always
      networks:
        - app
      container_name: frontend

    backend:
      build: backend
      ports:
        - 8000:8000
      volumes:
        - ./backend:/app
      env_file:
        - .env.prod
      restart: always
      networks:
        - app
      container_name: backend
      depends_on:
        - redis
        - db

    model_worker:
      build: model
      command: celery -A celery_app worker --loglevel=info
      volumes:
        - ./model:/app
      depends_on:
        - rabbitmq
        - redis
        - db
      env_file:
        - .env.prod
      networks:
        - app
      container_name: model_worker

    db:
      image: postgres:13
      container_name: db_app
      restart: always
      volumes:
        - postgres_database_volume:/var/lib/postgresql/data
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: secret
        POSTGRES_DB: postgres_db
      env_file:
        - .env.prod
      ports:
        - "5432:5432"
      networks:
        - app

    redis:
      image: redis:alpine
      container_name: redis
      restart: always
      ports:
        - "6379:6379"
      networks:
        - app

    rabbitmq:
      image: rabbitmq:3-management
      container_name: rabbitmq
      environment:
        RABBITMQ_DEFAULT_USER: user
        RABBITMQ_DEFAULT_PASS: pass
      ports:
        - "5672:5672"
        - "15672:15672"
      networks:
        - app

    nginx:
      image: nginx:latest
      container_name: nginx_proxy
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      depends_on:
        - rabbitmq
      networks:
        - app

    prometheus:
      image: prom/prometheus:v2.53.0
      container_name: prometheus
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
        - prometheusdata:/prometheus
      restart: unless-stopped
      ports:
        - 9090:9090
      networks:
        - app

    grafana:
      image: grafana/grafana:9.4.7
      container_name: grafana
      volumes:
        - grafanadata:/var/lib/grafana
      restart: unless-stopped
      ports:
        - 3000:3000
      networks:
        - app

  networks:
    app:
      driver: bridge
      name: heart-app-network

  volumes:
    postgres_database_volume:
    grafanadata:
    prometheusdata:

